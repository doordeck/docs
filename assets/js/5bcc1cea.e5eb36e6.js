"use strict";(self.webpackChunkdoordeck_docs=self.webpackChunkdoordeck_docs||[]).push([[8978],{6721:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"guide/adding-more-ephemeral-keys-secondary-authentication-checks","title":"Adding More Ephemeral Keys & Secondary Authentication Checks","description":"Secondary authentication checks for ephemeral key registration","source":"@site/docs/guide/adding-more-ephemeral-keys-secondary-authentication-checks.md","sourceDirName":"guide","slug":"/guide/adding-more-ephemeral-keys-secondary-authentication-checks","permalink":"/docs/guide/adding-more-ephemeral-keys-secondary-authentication-checks","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"adding-more-ephemeral-keys-secondary-authentication-checks","title":"Adding More Ephemeral Keys & Secondary Authentication Checks","description":"Secondary authentication checks for ephemeral key registration"},"sidebar":"tutorialSidebar","previous":{"title":"Ephemeral Key Registration & Unlocking a Door","permalink":"/docs/guide/ephemeral-key-registration-unlocking-a-door"},"next":{"title":"Sharing Doors","permalink":"/docs/guide/sharing-doors"}}');var o=t(4848),a=t(8453);const r={id:"adding-more-ephemeral-keys-secondary-authentication-checks",title:"Adding More Ephemeral Keys & Secondary Authentication Checks",description:"Secondary authentication checks for ephemeral key registration"},s=void 0,c={},h=[];function d(e){const n={a:"a",admonition:"admonition",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.admonition,{title:"Use the SDK",type:"info",children:(0,o.jsxs)(n.p,{children:["Our ",(0,o.jsx)(n.a,{href:"/docs/kotlin-multiplatform-sdk/install",children:"SDK"})," takes care of the complexity detailed in this guide, we strongly recommend using it for your application.\nThe information provided here is for educational purposes and to help you understand the underlying processes."]})}),"\n",(0,o.jsxs)(n.p,{children:["In this guide we'll explore secondary authentication checks for ephemeral key registration - you may have found when\nfollowing the steps in the guide on\n",(0,o.jsx)(n.a,{href:"/docs/guide/ephemeral-key-registration-unlocking-a-door",children:"ephemeral key registration and unlocking"})," that Sentry Interactive responded with\na HTTP 423 when trying to add the ephemeral key."]}),"\n",(0,o.jsx)(n.p,{children:"When setting an ephemeral key for a new user, it will almost always be accepted immediately (because it's a new user!),\nbut if the user wants to use a new device, they need a new ephemeral key (unless you have a secure way to get the first\nephemeral key from the other device, such as through keychain sync), in this case Sentry Interactive may want to verify the user\nis who they claim - we tell you about this through the use of HTTP 423."}),"\n",(0,o.jsx)(n.p,{children:"We have a few options for verifying the user, email, SMS or a phone call - all of these are white labelled (or barely\nlabelled at all) so it looks like it's coming from your App rather than from Sentry Interactive - we'll try and select the most\nappropriate communication method based on the fields you've provided in the OpenID auth token, we'll look for a verified\ncommunication method with preference for email then SMS as this is what user's have come to expect, but you can override\nthis. Let's ask for a secondary authentication code to be SMS' to us:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:'curl "https://api.doordeck.com/auth/certificate/verify?method=SMS"  \\\n  -X POST \\\n  -H "Authorization: Bearer $TOKEN" \\\n  -H \'content-type: application/json\' \\\n  --data-binary "{\\"ephemeralKey\\":\\"`cat public.base64.key`\\"}"\n'})}),"\n",(0,o.jsx)(n.p,{children:"You'll note, that just like when we registered the ephemeral key last time, we need to specify the entire ephemeral key\nat the start of the verification process."}),"\n",(0,o.jsx)(n.p,{children:"If your OpenID auth token includes the telephone field and has marked it as verified, you should receive an SMS shortly"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"the code in the SMS is valid for 5 minutes."}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["You can remove ",(0,o.jsx)(n.code,{children:"?method=SMS"})," and Sentry Interactive will auto-select a method, or you can specify one of the following:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"SMS"})," - Send an SMS to the user"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"TELEPHONE"})," - Call the user and read out the code"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"EMAIL"})," - Email the user"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Bear in mind, if you specify a method but don't have the corresponding field in the OpenID auth token, you'll get an\nerror message."}),"\n",(0,o.jsx)(n.p,{children:"After acquiring the verification code from the user, you should sign it with your ephemeral key - almost exactly like\nyou'd sign the JWT used in the unlock request from the previous guide, but this time we need standard Base64 encoding\nrather than Base64Url; we can use the commonly available base64 and openssl commands to do this."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"# Sign code\necho -n '12345678' > code\nopenssl pkeyutl -sign -inkey private.key  -rawin -in code | base64\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can now send Sentry Interactive the signature, and we'll know that both the verification code is what we expect and that\nyou've used the same ephemeral key for verifying - we'll then return a certificate chain that you can use immediately."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:'curl "https://api.doordeck.com/auth/certificate/check"  \\\n  -X POST \\\n  -H "Authorization: Bearer $TOKEN" \\\n  -H \'content-type: application/json\' \\\n  --data-binary "{\\"verificationSignature\\":\\"BASE64-ENCODED-SIGNATURE"}"\n'})}),"\n",(0,o.jsx)(n.p,{children:"Our SDKs have this process setup already - you can check early if the user will need to go through a verification\nprocess and decide to perform it as they login or wait until they go to unlock a door, both have advantages and\ndisadvantages."})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(6540);const o={},a=i.createContext(o);function r(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);